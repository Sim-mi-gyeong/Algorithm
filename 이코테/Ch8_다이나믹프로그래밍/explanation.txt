1. 다이나믹 프로그래밍
(1) 정의
 - 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
 - 이미 계산된 결과(작은 문제)는 -> '별도의 메모리 영역'에 저장하여 다시 계산하지 않도록 함.
 - 다이나믹 프로그래밍 구현 : 2가지 방식 -> 탑다운(하향식) + 보텀업(상향식)

(2) 특징
 - 다이나믹 프로그래밍 = '동적 계획법'이라고도 부름
 - 일반적으로 프로그래밍 분야에서 동적(Dynamic)이란,
   -> 자료구조에서 동적 할당(Dynamic Allocation)은 '프로그램이 실행되는 도중에 필요한 메모리를 할당하는 기법'
   -> 반면, 다이나믹 프로그래밍에서 '다이나믹'은 별다른 의미 없이 사용된 단어

(3) 조건
 - 아래 조건 만족 시 다이나믹 프로그래밍 사용 가능
  1) 최적 부분 구조(Optimal Substructure)
   - 큰 문제를 -> 작은 문제로 나눌 수 있으며, 
   - 작은 문제의 답을 모아서 큰 문제를 해결 가능
  2) 중복되는 부분 문제(Overlapping Subproblem)
   - 동일한 작은 문제를 반복적으로 해결해야 함.

[예시]
1. 피보나치 수열
   1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
(1) 표현 방법
 - 점화식: 인접한 항들 사이의 관계식
 - 피보나치 수열을 점화식으로 표현하면 다음과 같다.
   An = An-1 + An-2, A1 = 1, A2 = 1
 - 프로그래밍에서 수열을 -> 배열이나 리스트(table)를 이용해 표현

(2) 시간 복잡도 분석
 - 단순 재귀 함수로 피보나치 수열 해결 시 '지수 시간 복잡도'를 가지게 됨.
 - f(6)을 구하는 피보나치 수열 문제에서, f(2)가 '여러 번 호출' -> [중복되는 부분 문제]
   -> 한 번 해결한 문제 f(2)에 대해 값을 미리 저장하여 사용
  1) 세타 표기법 세타(1.618... ^N)
  2) 빅오 표기법 O(s^N)
   - 빅오 표기법 기준, f(30)을 계산하기 위해 약 10억 가량의 연산을 수행해야 함.

(3) 피보나치 수열의 효율적인 해법: 다이나믹 프로그래밍
 - 다이나믹 프로그래밍 '사용 조건'을 만족하는지 확인
  1) 최적 부분 구조: 큰 문제를 -> 작은 문제로 나눌 수 있음.
  2) 중복되는 부분 문제: 동일한 작은 문제를 반복적으로 해결
 -> 피보나치 수열은 다이나믹 프로그래밍 사용 조건을 만족

[다이나믹 프로그래밍 방식]
1. 메모이제이션(Memoization)(탑다운)
(1) 정의
 - 다이나믹 프로그래밍을 구현하는 방법 중 하나
 - '한 번 계산한 결과'를 -> 메모리 공간에 메모하는 기법
   -> 같은 문제를 다시 호출하면, 메모했던 결과를 그대로 가져옴
   -> 값을 기록해 놓는다는 점에서, 캐싱(Caching)이라고 함.
      +) 다이나믹 프로그래밍에서 사용하는 배열 이름: cache, memo, table, dp, d 설정 많음

(2) 메모이제이션 동작 분석
  - 이미 계산된 결과를 메모리에 저장하면 -> f(6) - f(5) - f(4) - f(3) 과 같이 색칠된 노드만 처리할 것을 기대
 -> 색칠된 노드 값을 찾는 것 : 상수 시간 소요
  - 피보나치 수열 함수's 시간 복잡도 = O(N)

[Top down Vs Bottom up]
 - 탑다운(메모이제이션) 방식은 하향식 / 보텀업 방식은 상향식
 - 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식
   -> 결과 저장용 리스트(배열) = 'DP 테이블' 이라고 함
 - 메모이제이션은, '이전에 계산된 결과를 일시적으로 기록해 놓은 넓은 개념' 을 의미
   -> 따라서, 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아님.
   -> 한 번 계산된 결과를 담아 놓기만 하고, 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있음.

 
[다이나믹 프로그래밍 Vs 분할 정복]
 1) 다이나믹 프로그래밍과 분할 정복 모두 - [최적 부분 구조]를 가질 때 사용 가능
   -> 큰 문제를 -> 작은 문제로 나눌 수 있으며, 작은 문제의 답을 모아 -> 큰 문제를 해결할 수 있는 상황

 2) 다이나믹 프로그래밍과 분할 정복의 차이점 = [부분 문제의 중복]
  - 다이나믹 프로그래밍 문제 - 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복됨.
  - 분할 정복 문제 - 동일한 부분 문제가 반복적으로 계산 X

[분할 정복]
 - 분할 정복의 대표 예시 '퀵 정렬'
 - 한 번 기준 원소(Pivot)가 자리를 변경해서 자리를 잡으면 -> 그 기준 원소의 위치는 바뀌지 x
 - 분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출되지 X
   Ex) Pivot : 5 원소에 대해 분할을 수행한 후 왼쪽 / 오른쪽 범위에 대해 정렬이 다시 수행되는
       재귀를 수행하지만, 한 번 분할이 이루어진 후 5는 다른 부분 문제에 포함되지 않고, 다시 호출되지 X

[다이나믹 프로그래밍 문제에 접근하는 방법]
1. 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요
2. 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
 - 다른 알고리즘으로, 풀이 방법이 떠오르지 않으면 -> 다이나믹 프로그래밍 고려
3. 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤, (탑다운)
   -> 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법 사용 가능
4. 일반적인 코딩 테스트 수준에서는, 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우 많음.