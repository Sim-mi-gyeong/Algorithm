# 문제 해결 아이디어
# 절단기에 설정할 수 있는 높이 값이 커지면 -> 잘린 떡의 길이 합은 작아지고
# 절단기에 설정할 수 있는 높이 값이 작아지면 -> 잘린 떡의 길이 합은 커진다. 
# -> 적절한 높이를 찾을 때까지 이진 탐색을 수행하며 높이 H를 반복해서 조정
# '현재 이 높이로 자르면 조건을 만족할 수 있는가'를 확인한 뒤에, 
# 조건의 만족 여부('예' 혹은 '아니오)에 따라서 탐색 범위를 좁혀서 해결 가능
# 절단기의 높이는 0부터 ~ 10억까지의 정수 중 하나
# -> 이렇게 큰 탐색 범위를 보면 가장 먼저 '이진 탐색' 떠올리기

# [Step 1] 시작점: 0, 끝점: 19, 중간점: 9 -> 필요한 떡의 길이 m = 6 -> 결과 저장(25)
# [Step 2] 시작점: 10, 끝점: 19, 중간점: 14 -> 잘린 떡의 길이 = 9 -> 결과 저장, 높이 증가
# [Step 3] 시작점: 15, 끝점: 19, 중간점: 17 -> 잘린 떡의 길이 = 2 -> 결과 저장 X
# -> 중간점(높이) 값을 왼쪽(중간점의 왼쪽)으로 이동시키기
# [Step 4] 시작점: 15, 끝점: 16, 중간점: 15 -> 잘린 떡의 길이 = 6 -> 결과 저장

# 이진 탐색을 수행하며, 더이상 탐색 범위를 줄일 수 없을 때까지 반복

# 중간점의 값 = 시간이 지날수록 '최적화된 값'이 됨
# -> 과정을 반복하면서, 얻을 수 있는 떡의 길이 합이 필요한 떡의 길이보다 크거나 같을 때마다 중간점의 값 기록


n, m = list(map(int, input().split()))

array = list(map(int, input().split()))

# 이진탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

# 이진탐색 수행
result = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for i in array:
        # 잘랐을 때의 떡의 길이 계산
        if i > mid:
            total += (i - mid)
    # 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)
    if total < m:
        end = mid - 1   
    # 떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)
    else:
        result = mid   # 최대한 덜 잘랐을 때가 정답 -> 여기에서 result에 기록
        start = mid + 1
print(result)

'''
[입력 예시]
4 6
19 15 10 17
[출력 예시]
15
'''