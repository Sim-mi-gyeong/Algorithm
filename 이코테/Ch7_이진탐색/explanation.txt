1. 순차 탐색 : 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법

2. 이진 탐색
(1) 정의
 - 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법
-> 이진 탐색은 [시작점, 끝점, 중간점]을 이용하여 탐색 범위를 설정 
 
(2) 동작 과정 
 Ex) 0 2 4 6 8 10 12 14 16 18
[Step 1] 시작점: 0, 끝점: 9, 중간점: 4(소수점 이하 제거) <- 인덱스
 - 중간점에 위치하는 값(8)과 찾고자 하는 값인 4를 비교하여 
-> 어떤 값이 더 큰지를 비교
-> if) 찾고자 하는 값 < 중간점에 위치하는 값
-> 중간점부터 ~ 오른쪽에 있는 값은 확인할 필요 X
-> 끝점을 중간점의 왼쪽으로 옮김

[Step 2] 시작점: 0, 끝점: 3, 중간점: 1(소수점 이하 제거)
 - 중간점 위치에 있는 값(2) < 찾고자 하는 값(4)
-> 중간점 포함 왼쪽의 데이터는 볼 필요 X
-> 시작점 위치를 중간점 오른쪽으로 옮김

[Step 3] 시작점: 2, 끝점: 3, 중간점: 2
 - 중간점 위치의 값인 4는 우리가 찾고자 하는 값과 동일 -> 탐색 종료

(3) 시간 복잡도
 - 단계마다 탐색 범위를 2로 나누는 것과 동일하므로 -> 연산 횟수는 log(2)N에 비례
Ex) 초기 데이터 개수가 32개 
-> 이상적으로 1단계를 거치면 16개 가량의 데이터만 남고 
-> 2단계를 거치면 8개 가량의 데이터만 남고
-> 3단계를 거치면 4개 가량의 데이터만 남음
 - 이진 탐색은 탐색 범위를 '절반씩' 줄이며, 시간 복잡도는 O(logN)을 보장

[파이썬 이진 탐색 라이브러리]

1) bisect_left(a, x): 정렬된 순서를 유지하면서, 배열 a에 x를 삽입할 가장 왼쪽 인덱스 반환
2) bisect_right(a, x): 정렬된 순서를 유지하면서, 배열 a에 x를 삽입할 가장 오른쪽 인덱스 반환


3. 파라메트릭 서치(Parametric Search)
(1) 정의
 - 최적화 문제를 결정문제('예' 혹은 '아니오')로 바꾸어 해결하는 기법
-> 최적화 문제: 어떤 함수의 값을 가능한 높이거나, 최대한 낮추는 것
Ex) 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
 - 일반적으로, 코딩 테스트에서 파라메트릭 서치 문제는 이진 탐색을 이용해 해결 가능