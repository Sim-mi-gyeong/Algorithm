1. 최단 경로 알고리즘 정의
 - 가장 짧은 경로를 찾는 알고리즘
 - 각 지점은 그래프에서 노드로 표현
 - 지점 간 연결된 도로는 그래프에서 간선으로 표현

2. 다양한 문제 상황
 1) 한 지점에서 -> 다른 지점까지의 최단 경로
 2) 한 지점에서 -> 다른 모든 지점까지의 최단 경로
 3) 모든 지점에서 -> 다른 모든 지점까지의 최단 경로

3. 다익스트라 최단 경로 알고리즘
 1) '특정한 노드'에서 출발하여 -> '다른 모든 노드'로 가는 최단 경로 계산
 2) 다익스트라 최단 경로 알고리즘은, '음의 간선이 없을 때' 정상적으로 동작
 - 현실 세계의 도로(간선)은 음의 간선으로 표현되지 않음. -> 현실세계의 길찾기 문제에 적용 가능

 3) 다익스트라 최단 경로 알고리즘은, '그리디 알고리즘'으로 분류
 - [매 상황에서 가장 비용이 적은 노드를 선택]해 임의의 과정을 반복
 - 그리디한 방법으로 동작할 수 있는 이유는, [거리가 가장 짧은 노드를 고를 때마다, '해당 노드까지의 거리는 바뀌지 않기 때문']
 - 기본적으로, 다이나믹 프로그래밍으로 분류되기도 함.
   Ex) A -> C까지 가는 최단 경로는, A -> B , B -> C 로 가는 최단 경로를 모두 고려한 경로이므로, DP 원리 적용

4. 다익스트라 최단 경로 알고리즘 동작 과정
 1) 출발 노드 설정
 2) 최단 거리 테이블 초기화
 3) 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드 선택 -> 그리디 
 4) 해당 노드를 거쳐, 다른 노드로 가는 비용을 계산해 -> 최단 거리 테이블 갱신
 5) 위 과정에서 3번과 4번을 반복
 * 완전한 형태인, 최단 경로 그 자체까지 알기 위해서는 별도의 로직이 추가적으로 필요

 Ex) 알고리즘 동작 과정에서 최단 거리 테이블은 '각 노드에 대한 현재까지의 최단 거리 정보' 를 가지고 있음
  -> 처리 과정에서, 더 짧은 경로를 찾으면, '이제부터는 이 경로가 제일 짧은 경로야' 라고 갱신

5. 다익스트라 알고리즘 특징
 1) 그리디 알고리즘
  - 매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택해 임의의 과정 반복
 2) 단계를 거치며 '한 번 처리된 노드의 최단 거리는 고정'되어 더 이상 바뀌지 않음
  - 한 단계 당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해 가능
 3) 다익스트라 알고리즘을 수행한 뒤 -> '테이블에 각 노드까지의 최단 거리 정보가 저장'
  - 완벽한 형태의 최단 경로를 구하려면, 소스코드에 추가적인 기능을 넣어야함

6. 다익스트라 알고리즘의 간단한 구현 방법
 (1) 단계마다 방문하지 않은 노드 중, 최단 거리가 가장 짧은 노드를 선택하기 위해, '매 단계마다 1차원 테이블의 모든 원소를 확인(순차 탐색)' 한다.
 (2) 성능 분석
  1) 총 O(V) 번에 걸쳐서 최단 거리가 가장 잛은 노드를 매번 선형 탐색 해야함.
  -> 따라서, 전체 시간 복잡도는 O(V^2)   * v : 노드의 개수
  2) 일반적으로 코딩 테스트의 최단 경로 문제에서 전체 노드의 개수가 5,000 개 이하라면, 이 코드로 문제 해결 가능
  -> 하지만, 노드의 개수가 10,000 개를 넘어가는 문제라면 ? 

7. 우선순위 큐(Priority Queue) 정의
 1) 우선 순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조
  Ex) 여러 개의 물건 데이터를 자료구조에 넣었다가, 가치가 높은 물건 데이터부터 꺼내서 확인해야 하는 경우 사용 가능
 2) Python, C++, Java 포함 대부분의 프로그래밍 언어에서 표준 라이브러리 형태로 지원 

8. 힙(Heap)
 - 우선순위 큐를 구현하기 위해 사용하는 자료구조 중 하나
 - 최소 힙(Min Heap) 과 최대 힙(Max Heap) 이 있음.
 - 다익스트라 최단 경로 알고리즘을 포함해 다양한 알고리즘에서 사용
 - 내부적으로 트리 구조 사용
 * 우선순위 큐 구현 방식에 따른 삽입 및 삭제 시간 
  1) 리스트 : 삽입 시간 = O(N1) / 삭제 시간 = O(N)
  2) 힙(Heap) : 삽입 시간 = O(logN) / 삭제 시간 = O(logN)

9. 다익스트라 알고리즘 : 개선된 구현 방법
 (1) 단계마다 '방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택' 하기 위해 -> '힙(Heap)' 자료구조 이용
  - 최단 거리가 가장 짧은 노드를 고든 뒤 -> 해당 노드를 거쳐가는 경우를 확인해 -> 테이블 갱신하는 순서는 같으나,
    최단 거리가 가장 짧은 노드를 고를 때 '힙' 자료 구조를 사용하는 것임!
 (2) 다익스트라 알고리즘이 동작하는 기본 원리는 동일
  - 현재 가장 가까운 노드를 저장해 놓기 위해, 힙 자료구조를 추가적으로 이용한다는 점이 다름
  - 현재의 최단 거리가 가장 짧은 노드를 선택해야 하므로 [최소 힙] 사용
 (3) 개선된 구현 방법 성능 분석
  1) 힙 자료구조를 이용하는 다익스트라 알고리즘의 시간 복잡도는 O(ElogV)
  2) 노드를 하나씩 꺼내 검사하는 반복문(while문)은 노드의 개수 V 이상의 횟수로는 처리되지 않음.
  -> 결과적으로, 현재 우선순위  큐에서 꺼낸 노드와 연결된 다른 노드들을 확인하는 총 횟수는 최대 간선의 개수(E) 만큼 연산이 수행될 수 있음.
  3) 직관적으로, 전체 과정은 E 개의 원소를 우선순위 큐에 넣었다가 모두 빼내는 연산과 매우 유사
   - 시간 복잡도를 O(ElogE)로 판단 가능
   - 중복 간선을 포함하지 않는 경우(오고, 가는 경우만) 이를 O(ElogV)로 정리 가능
   -> O(ElogE) -> O(ElogV^2) -> O(2ElogV) -> [O(ElogV)]

10. 플로이드 워셜 알고리즘 개요


다익스트라 알고리즘이 그리디한 방식으로 동작할 수 있는 이유는,
최단 거리가 가장 짧은 노드를 고를 때마다, 해당 노드까지의 거리는 더 이상 바뀌지 X
-> 1번 노드에서 4번 노드까지의 거리는 1이므로,
-> 4번 노드를 거쳐갈 때의 비용을 고려하면 4번 노드까지의 거리인 1에, 3번 노드까지의 거리 3을 더해 
-> 4와 3번 노드에 담겨있는 현재 거리 값(5)과 비교하기 
-> 그 값이 더 작으면 -> 테이블 갱신

마지막(6번) 노드에 대해서도 처리 수행
-> 마지막 노드는 처리하지 않아도 됨
-> 그 이유는, 이미 앞서 확인했던 다른 노드까지의 최단 거리 값은 더 이상 바뀌지 않기 때문

- 꺼낸 원소의 거리 값이 현재 테이블에 기록된 값보다 크다면, 이미 방문처리가 된 노드이므로 무시 가능