1. 서로소 집합
 - 서로소 집합(Disjoint Sets)이란 '공통 원소가 없는 두 집합'
 Ex1) (1, 2)와 {3, 4}는 서로소 관계이다.
 Ex2) {1, 2}와 {2, 3}은 서로소 관계가 아니다.


2. 서로소 집합 자료구조
 1) 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
 2) 서로소 집합 자료구조는 두 종류의 연산 지원
  - 합집합(Union) : 두 개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산
  - 찾기(Find) : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산
 3) 서로소 집합 자료구조는, '합치기 찾기(Union Find)' 자료구조라고 불림


3. 서로소 집합 자료구조
 - 여러 개의 합치기 연산이 주어졌을 때, 서로소 집합 자료구조의 동작 과정
 (1) 합집합(Union) 연산을 확인해 -> 서로 연결된 두 노드 A, B 확인
  1) A와 B의 루트 노드 A', B' 를 각각 찾는다.
  2) A'를 B'의 부모 노드로 설정
 (2) 모든 합집합(Union) 연산을 처리할 때까지 1번의 과정 반복


4. 서로소 집합 자료구조 동작 과정
 - 처리할 연산들 : Union(1, 4) -> Union(2, 3) -> Union(2, 4) -> Union(5, 6)
 [초기 단계] 노드의 개수 크기의 부모 테이블 초기화
 [Step 1] 노드 1과 노드 4의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 1과 4이므로, 더 큰 번호에 해당하는 루트 노드 4의 부모를 1(더 작은 수의 부모)로 설정
 [Step 2] 노드 3와 노드 3의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 2와 3이므로, 더 큰 번호에 해당하는 루트 노드 3의 부모를 2로 설정
 [Step 3] 노드 2와 노드 4의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 2와 1이므로, 더 큰 번호에 해당하는 루트 노드 2의 부모를 1로 설정
 [Step 3] 노드 5와 노드 6의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 5와 6이므로, 더 큰 번호에 해당하는 루트 노드 6의 부모를 5로 설정


5. 서로소 집합 자료구조의 연결성
 1) 서로소 집합 자료구조에서는, '연결성'을 집합의 형태 확인 가능
 2) 기본적인 형태의 서로소 집합 자료구조에서는, 루트 노드에 즉시 접근 X
  - 루트 노드를 찾기 위해 '부모 테이블을 계속해서 확인'하며 거슬러 올라감

6. 서로소 집합 자료구조의 기본적인 구현 방법의 문제점
 1) 합집합(Union) 연산이 편향되게 이루어지는 경우, 찾기(Find) 함수가 비효율적으로 동작
 2) 최악의 경우에는 찾기(Find) 함수가 모든 노드를 다 확인하게 되어 -> 시간 복잡도가 O(V)


7. 서로소 집합  자료구조의 '경로 압축'
 1) 찾기(Find) 함수를 최적화하기 위한 방법으로, 경로 압축(Path Compression) 이용 가능
  - 찾기(Find) 함수를 재귀적으로 호출한 뒤 -> '부모 테이블에 값을 바로 갱신'
  '''
    def find_parent(parent, x):
        if parent[x] != x:
            parent[x] = find_parent(parent, parent[x])
        return parent[x]
  '''
  -> 부모 테이블에 적혀있는 값이, 자신의 루트 노드 값! 

 2) 경로 압축 기법을 적용하면 -> 각 노드에 대하여 '찾기(Find) 함수를 호출한 이후', 해당 노드의 루트 노드가 바로 부모 노드가 된다.
  - 동일한 예시에 대해, 모든 합집합(Union) 함수를 처리한 후 -> 각 원소에 대해 찾기(Find) 함수를 실행하면 부모 테이블 갱신


8. 서로소 집합을 활용한 '사이클 판별'
 (1) 서로소 집합은, '무방향 그래프 내에서의 사이클 판별' 시 사용 가능
  - 방향 그래프에서의 사이클 여부는 'DFS'를 이용해 판별 가능
 (2) 사이클 판별 알고리즘
  1) 각 간선을 하나씩 확인하며, 두 노드의 루트 노드 확인
   - 루트 노드가 서로 다르다면 -> 두 노드에 대해 합집합(Union) 연산 수행
   - 루트 노드가 서로 같아면 -> 사이클(Cycle) 발생
  2) 그래프에 포함되어 있는 모든 간선해 대해 1번 수행


9. 서로소 집합을 활용한 '사이클 판별' 동작 과정
 [초기 단계] 모든 노드에 대하여 자기 자신을 부모로 설정하는 형태로 부모 테이블 초기화
 [Step 1] 간선 (1, 2) 확인 
  -> 노드 1과 노드 2의 루트 노드는 각각 1과 2
  -> 더 큰 번호에 해당하는 노드 2의 부모 노드를 1로 변경
 [Step 2] 간선 (1, 3) 확인 
  -> 노드 1과 노드 3의 루트 노드는 각각 1과 3
  -> 더 큰 번호에 해당하는 노드 3의 부모 노드를 1로 변경
 [Step 3] 간선 (2, 3) 확인 
  -> 노드 2와 노드 3의 루트 노드가 모두 1
  -> 사이클 발생!


10. 신장 트리
  - 그래프에서, '모든 노드를 포함' 하면서 & '사이클이 존재하지 않는' 부분 그래프
  - 모든 노드가 포함되어 서로 연결되면서, 사이클이 존재하지 않는다는 조건 = 트리의 조건


11. 최소 신장 트리
 - 최소한의 비용으로, 구성되는 신장 트리를 찾아야 할 때
 Ex) N개의 도시가 존재하는 상황에서, 두 도시 사이에 도로를 놓아 '전체 도시가 서로 연결'될 수 있게 도로를 설치하는 경우
   - 두 도시 A, B 를 선택했을 때, A에서 -> B로 이동하는 경로가 반드시 존재하도록 도로 설치


12. 크루스칼 알고리즘
 - 대표적인 최소 신장 트리 알고리즘
 - 그리디 알고리즘으로 분류
 (1) 동작 과정
  1) 간선 데이터를 비용에 따라 '오름차순으로 정렬'
  2) 간선을 하나씩 확인하며, 현재의 간선이 사이클을 발생시키는지 확인
   - 사이클이 발생하지 않는 경우 -> 최소 신장 트리에 포함
   - 사이클이 발생하는 경우 -> 최소 신장 트리에 포함 x
  3) 모든 간선에 대해 2번의 과정 반복

 (2) 크루스칼 알고리즘 성능 분석
  1) 간선의 개수가 E 개 일 때, O(ElogE)의 시간 복잡도를 가진다
  2) 크루스칼 알고리즘에서, 가장 많은 시간을 요구하는 곳은 간선의 정렬을 수행하는 부분
   - 표준 라이브러리를 이용해 E개의 데이터를 정렬하기 위한 시간 복잡도는 O(ElogE)


13. 위상 정렬
 (1) 위상 정렬의 정의
   - '사이클이 없는 방향 그래프'의 모든 노드를 방향성에 거스르지 않도록, 순서대로 나열하는 것
    Ex) 선수과목을 고랴한 학습 순서 결정

        자료구조  ----------->  알고리즘 
          |                     |        
          |                     |
           ----> 고급 알고리즘 <----

    -> 위 세 과목을 모두 듣기 위한 적절한 학습 순서는 ?
     1) 자료구조 -> 알고리즘 -> 고급 알고리즘 (O)
     2) 자료구조 -> 고급 알고리즘 -> 알고리즘 (X)

 (2) 진입차수와 진출차수
  1) 진입차수(Indegree): 특정한 노드로 들어오는 간선의 개수
  2) 진출차수(Outdegree): 특정한 노드에서 나가는 간선의 개수


14. 위상 정렬 알고리즘
 - '큐'를 이용하는 위상 정렬 알고리즘의 동작과정
 - DFS도 가능
(1) 진입 차수가 0인 모든 노드를 큐에 넣는다.

(2) 큐가 빌 때까지 다음의 과정을 반복한다.
 1) 큐에서 원소를 꺼내, 해당 노드에서 나가는 간선을 그래프에서 제거
 2) 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.

-> 결과적으로, '각 노드가 큐에 들어온 순서'가, 위상 정렬을 수행한 결과와 같다.


15. 위상 정렬 동작 예시
 - 위상 정렬을 수행할 그래프 준비
 - 이때, 그래프는 '사이클이 없는 방향 그래프(DAG)' 여야 함.
 -> 만약, 사이클이 존재한다면 -> 그 사이클에 포함되어 있는 모든 노드는 '진입 차수가 1 이상'

 [초기 단계] 초기 단계에서는, 진입 차수가 0인 모든 노드를 큐에 넣는다.
  - 처음에 노드 1이 큐에 삽입
 [Step 1] 큐에서 노드 1을 꺼낸 뒤에, 노드 1에서 나가는 간선 제거
  - 새롭게 진입차수가 0이 된 노드들을 큐에 삽입
  - 더 작은 번호의 노드가 큐에 우선적으로 들어간다고 가정

 [위상 정렬 결과]
  - 큐에 삽입된 전체 노드 순서 : 1 -> 2 -> 5 -> 3 -> 6 -> 4 -> 7
  - 전체 방향성에 어긋나지 않도록 각 노드를 차례대로 나열한 것과 동일


16. 위상 정렬 특징
 1) 위상 정렬은 DAG 에 대해서만 수행 가능
  - DAG(Direct Acyclic Graph) : 순환하지 않는 방향 그래프
 2) 위상 정렬에서는, '여러 가지 답'이 존재 가능
  - 한 단계에서 큐에 새롭게 들어가는 원소가 2개 이상인 경우 -> 여러 개의 답이 존재
 3) 모든 원소를 방문하기 전에, 큐가 빈다면 -> '사이클이 존재'한다고 판단할 수 있음
  - 사이클에 포함된 원소 중에서 어떠한 원소도 큐에 들어가지 못함
 4) 스택을 활용한 DFS를 이용해 위상 정렬 수행 가능


17. 위상 정렬 알고리즘 성능 분석
 - 위상 정렬을 위해 차례대로 모든 노드를 확인하며, 각 노드에서 나가는 간선을 차례대로 제거해야 함.
 -> 위상 정렬 알고리즘의 시간 복잡도는 [ O(V+E) ]
