1. 서로소 집합
 - 서로소 집합(Disjoint Sets)이란 '공통 원소가 없는 두 집합'
 Ex1) (1, 2)와 {3, 4}는 서로소 관계이다.
 Ex2) {1, 2}와 {2, 3}은 서로소 관계가 아니다.


2. 서로소 집합 자료구조
 1) 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
 2) 서로소 집합 자료구조는 두 종류의 연산 지원
  - 합집합(Union) : 두 개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산
  - 찾기(Find) : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산
 3) 서로소 집합 자료구조는, '합치기 찾기(Union Find)' 자료구조라고 불림


3. 서로소 집합 자료구조
 - 여러 개의 합치기 연산이 주어졌을 때, 서로소 집합 자료구조의 동작 과정
 (1) 합집합(Union) 연산을 확인해 -> 서로 연결된 두 노드 A, B 확인
  1) A와 B의 루트 노드 A', B' 를 각각 찾는다.
  2) A'를 B'의 부모 노드로 설정
 (2) 모든 합집합(Union) 연산을 처리할 때까지 1번의 과정 반복


4. 서로소 집합 자료구조 동작 과정
 - 처리할 연산들 : Union(1, 4) -> Union(2, 3) -> Union(2, 4) -> Union(5, 6)
 [초기 단계] 노드의 개수 크기의 부모 테이블 초기화
 [Step 1] 노드 1과 노드 4의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 1과 4이므로, 더 큰 번호에 해당하는 루트 노드 4의 부모를 1(더 작은 수의 부모)로 설정
 [Step 2] 노드 3와 노드 3의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 2와 3이므로, 더 큰 번호에 해당하는 루트 노드 3의 부모를 2로 설정
 [Step 3] 노드 2와 노드 4의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 2와 1이므로, 더 큰 번호에 해당하는 루트 노드 2의 부모를 1로 설정
 [Step 3] 노드 5와 노드 6의 루트 노드 각각 찾기
  -> 현재 루트 노드는 각각 5와 6이므로, 더 큰 번호에 해당하는 루트 노드 6의 부모를 5로 설정


5. 서로소 집합 자료구조의 연결성
 1) 서로소 집합 자료구조에서는, '연결성'을 집합의 형태 확인 가능
 2) 기본적인 형태의 서로소 집합 자료구조에서는, 루트 노드에 즉시 접근 X
  - 루트 노드를 찾기 위해 '부모 테이블을 계속해서 확인'하며 거슬러 올라감

6. 서로소 집합 자료구조의 기본적인 구현 방법의 문제점
 1) 합집합(Union) 연산이 편향되게 이루어지는 경우, 찾기(Find) 함수가 비효율적으로 동작
 2) 최악의 경우에는 찾기(Find) 함수가 모든 노드를 다 확인하게 되어 -> 시간 복잡도가 O(V)


7. 서로소 집합  자료구조의 '경로 압축'
 1) 찾기(Find) 함수를 최적화하기 위한 방법으로, 경로 압축(Path Compression) 이용 가능
  - 찾기(Find) 함수를 재귀적으로 호출한 뒤 -> '부모 테이블에 값을 바로 갱신'
  '''
    def find_parent(parent, x):
        if parent[x] != x:
            parent[x] = find_parent(parent, parent[x])
        return parent[x]
  '''
  -> 부모 테이블에 적혀있는 값이, 자신의 루트 노드 값! 

 2) 경로 압축 기법을 적용하면 -> 각 노드에 대하여 '찾기(Find) 함수를 호출한 이후', 해당 노드의 루트 노드가 바로 부모 노드가 된다.
  - 동일한 예시에 대해, 모든 합집합(Union) 함수를 처리한 후 -> 각 원소에 대해 찾기(Find) 함수를 실행하면 부모 테이블 갱신


8. 서로소 집합을 활용한 '사이클 판별'
 (1) 서로소 집합은, '무방향 그래프 내에서의 사이클 판별' 시 사용 가능
  - 방향 그래프에서의 사이클 여부는 'DFS'를 이용해 판별 가능
 (2) 사이클 판별 알고리즘
  1) 각 간선을 하나씩 확인하며, 두 노드의 루트 노드 확인
   - 루트 노드가 서로 다르다면 -> 두 노드에 대해 합집합(Union) 연산 수행
   - 루트 노드가 서로 같아면 -> 사이클(Cycle) 발생
  2) 그래프에 포함되어 있는 모든 간선해 대해 1번 수행


9. 서로소 집합을 활용한 '사이클 판별' 동작 과정
 [초기 단계] 모든 노드에 대하여 자기 자신을 부모로 설정하는 형태로 부모 테이블 초기화
 [Step 1] 간선 (1, 2) 확인 
  -> 노드 1과 노드 2의 루트 노드는 각각 1과 2
  -> 더 큰 번호에 해당하는 노드 2의 부모 노드를 1로 변경
 [Step 2] 간선 (1, 3) 확인 
  -> 노드 1과 노드 3의 루트 노드는 각각 1과 3
  -> 더 큰 번호에 해당하는 노드 3의 부모 노드를 1로 변경
 [Step 3] 간선 (2, 3) 확인 
  -> 노드 2와 노드 3의 루트 노드가 모두 1
  -> 사이클 발생!


10. 최소 신장 트리
  - 그래프에서, '모든 노드를 포함' 하면서 & '사이클이 존재하지 않는' 부분 그래프
  - 모든 노드가 포함되어 서로 연결되면서, 사이클이 존재하지 않는다는 조건 = 트리의 조건
